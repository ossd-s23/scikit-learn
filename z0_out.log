
_get_best_new_feature_score > Feature #0 > X_new
------------------------------------------------
(100, 1) [[0.0], [0.03], [0.06], [0.09], [0.12], [0.15], [0.18], [0.21], [0.24], [0.27], [0.3], [0.33], [0.36], [0.39], [0.42], [0.45], [0.48], [0.51], [0.54], [0.5700000000000001], [0.6], [0.63], [0.66], [0.6900000000000001], [0.72], [0.75], [0.78], [0.81], [0.84], [0.87], [0.9], [0.93], [0.96], [0.99], [1.02], [1.05], [1.08], [1.11], [1.1400000000000001], [1.17], [1.2], [1.23], [1.26], [1.29], [1.32], [1.35], [1.3800000000000001], [1.41], [1.44], [1.47], [1.5], [1.53], [1.56], [1.59], [1.62], [1.6500000000000001], [1.68], [1.71], [1.74], [1.77], [1.8], [1.83], [1.86], [1.8900000000000001], [1.92], [1.95], [1.98], [2.0100000000000002], [2.04], [2.07], [2.1], [2.13], [2.16], [2.19], [2.22], [2.25], [2.2800000000000002], [2.31], [2.34], [2.37], [2.4], [2.43], [2.46], [2.49], [2.52], [2.5500000000000003], [2.58], [2.61], [2.64], [2.67], [2.7], [2.73], [2.7600000000000002], [2.79], [2.82], [2.85], [2.88], [2.91], [2.94], [2.97]]

sklearn > utils > __init__.py > _fit_and_score
> Caller __call__

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
... > train_indices None

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.0], [0.03], [0.06], [0.09], [0.12], [0.15], [0.18], [0.21], [0.24], [0.27], [0.3], [0.33], [0.36], [0.39], [0.42], [0.45], [0.48], [0.51], [0.54], [0.5700000000000001], [0.6], [0.63], [0.66], [0.6900000000000001], [0.72], [0.75], [0.78], [0.81], [0.84], [0.87], [0.9], [0.93], [0.96], [0.99], [1.02], [1.05], [1.08], [1.11], [1.1400000000000001], [1.17], [1.2], [1.23], [1.26], [1.29], [1.32], [1.35], [1.3800000000000001], [1.41], [1.44], [1.47], [1.5], [1.53], [1.56], [1.59], [1.62], [1.6500000000000001], [1.68], [1.71], [1.74], [1.77], [1.8], [1.83], [1.86], [1.8900000000000001], [1.92], [1.95], [1.98], [2.0100000000000002], [2.04], [2.07], [2.1], [2.13], [2.16], [2.19], [2.22], [2.25], [2.2800000000000002], [2.31], [2.34], [2.37], [2.4], [2.43], [2.46], [2.49], [2.52], [2.5500000000000003], [2.58], [2.61], [2.64], [2.67], [2.7], [2.73], [2.7600000000000002], [2.79], [2.82], [2.85], [2.88], [2.91], [2.94], [2.97]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 24, 29]
... > train_indices [17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.0], [0.03], [0.06], [0.09], [0.12], [0.15], [0.18], [0.21], [0.24], [0.27], [0.3], [0.33], [0.36], [0.39], [0.42], [0.45], [0.48], [0.51], [0.54], [0.5700000000000001], [0.6], [0.63], [0.66], [0.6900000000000001], [0.72], [0.75], [0.78], [0.81], [0.84], [0.87], [0.9], [0.93], [0.96], [0.99], [1.02], [1.05], [1.08], [1.11], [1.1400000000000001], [1.17], [1.2], [1.23], [1.26], [1.29], [1.32], [1.35], [1.3800000000000001], [1.41], [1.44], [1.47], [1.5], [1.53], [1.56], [1.59], [1.62], [1.6500000000000001], [1.68], [1.71], [1.74], [1.77], [1.8], [1.83], [1.86], [1.8900000000000001], [1.92], [1.95], [1.98], [2.0100000000000002], [2.04], [2.07], [2.1], [2.13], [2.16], [2.19], [2.22], [2.25], [2.2800000000000002], [2.31], [2.34], [2.37], [2.4], [2.43], [2.46], [2.49], [2.52], [2.5500000000000003], [2.58], [2.61], [2.64], [2.67], [2.7], [2.73], [2.7600000000000002], [2.79], [2.82], [2.85], [2.88], [2.91], [2.94], [2.97]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
Pipeline(steps=[('Imputer', SimpleImputer(strategy='median')),
                ('StdScalar', StandardScaler())])
with X (80, 1) [[0.51], [0.54], [0.5700000000000001], [0.63], [0.66], [0.6900000000000001], [0.75], [0.78], [0.81], [0.84], [0.9], [0.93], [0.96], [0.99], [1.02], [1.05], [1.08], [1.11], [1.1400000000000001], [1.17], [1.2], [1.23], [1.26], [1.29], [1.32], [1.35], [1.3800000000000001], [1.41], [1.44], [1.47], [1.5], [1.53], [1.56], [1.59], [1.62], [1.6500000000000001], [1.68], [1.71], [1.74], [1.77], [1.8], [1.83], [1.86], [1.8900000000000001], [1.92], [1.95], [1.98], [2.0100000000000002], [2.04], [2.07], [2.1], [2.13], [2.16], [2.19], [2.22], [2.25], [2.2800000000000002], [2.31], [2.34], [2.37], [2.4], [2.43], [2.46], [2.49], [2.52], [2.5500000000000003], [2.58], [2.61], [2.64], [2.67], [2.7], [2.73], [2.7600000000000002], [2.79], [2.82], [2.85], [2.88], [2.91], [2.94], [2.97]]
with y 80 [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
SimpleImputer(strategy='median')
with X (80, 1) [[0.51], [0.54], [0.5700000000000001], [0.63], [0.66], [0.6900000000000001], [0.75], [0.78], [0.81], [0.84], [0.9], [0.93], [0.96], [0.99], [1.02], [1.05], [1.08], [1.11], [1.1400000000000001], [1.17], [1.2], [1.23], [1.26], [1.29], [1.32], [1.35], [1.3800000000000001], [1.41], [1.44], [1.47], [1.5], [1.53], [1.56], [1.59], [1.62], [1.6500000000000001], [1.68], [1.71], [1.74], [1.77], [1.8], [1.83], [1.86], [1.8900000000000001], [1.92], [1.95], [1.98], [2.0100000000000002], [2.04], [2.07], [2.1], [2.13], [2.16], [2.19], [2.22], [2.25], [2.2800000000000002], [2.31], [2.34], [2.37], [2.4], [2.43], [2.46], [2.49], [2.52], [2.5500000000000003], [2.58], [2.61], [2.64], [2.67], [2.7], [2.73], [2.7600000000000002], [2.79], [2.82], [2.85], [2.88], [2.91], [2.94], [2.97]]
with y 80 [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

sklearn > utils > __init__.py > _fit_and_score
> Caller __call__

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 24, 29, 33, 35, 37, 38, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
... > train_indices None

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.0], [0.03], [0.06], [0.09], [0.12], [0.15], [0.18], [0.21], [0.24], [0.27], [0.3], [0.33], [0.36], [0.39], [0.42], [0.45], [0.48], [0.51], [0.54], [0.5700000000000001], [0.6], [0.63], [0.66], [0.6900000000000001], [0.72], [0.75], [0.78], [0.81], [0.84], [0.87], [0.9], [0.93], [0.96], [0.99], [1.02], [1.05], [1.08], [1.11], [1.1400000000000001], [1.17], [1.2], [1.23], [1.26], [1.29], [1.32], [1.35], [1.3800000000000001], [1.41], [1.44], [1.47], [1.5], [1.53], [1.56], [1.59], [1.62], [1.6500000000000001], [1.68], [1.71], [1.74], [1.77], [1.8], [1.83], [1.86], [1.8900000000000001], [1.92], [1.95], [1.98], [2.0100000000000002], [2.04], [2.07], [2.1], [2.13], [2.16], [2.19], [2.22], [2.25], [2.2800000000000002], [2.31], [2.34], [2.37], [2.4], [2.43], [2.46], [2.49], [2.52], [2.5500000000000003], [2.58], [2.61], [2.64], [2.67], [2.7], [2.73], [2.7600000000000002], [2.79], [2.82], [2.85], [2.88], [2.91], [2.94], [2.97]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 36, 39, 40, 41, 43, 46]
... > train_indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 24, 29, 33, 35, 37, 38, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.0], [0.03], [0.06], [0.09], [0.12], [0.15], [0.18], [0.21], [0.24], [0.27], [0.3], [0.33], [0.36], [0.39], [0.42], [0.45], [0.48], [0.51], [0.54], [0.5700000000000001], [0.6], [0.63], [0.66], [0.6900000000000001], [0.72], [0.75], [0.78], [0.81], [0.84], [0.87], [0.9], [0.93], [0.96], [0.99], [1.02], [1.05], [1.08], [1.11], [1.1400000000000001], [1.17], [1.2], [1.23], [1.26], [1.29], [1.32], [1.35], [1.3800000000000001], [1.41], [1.44], [1.47], [1.5], [1.53], [1.56], [1.59], [1.62], [1.6500000000000001], [1.68], [1.71], [1.74], [1.77], [1.8], [1.83], [1.86], [1.8900000000000001], [1.92], [1.95], [1.98], [2.0100000000000002], [2.04], [2.07], [2.1], [2.13], [2.16], [2.19], [2.22], [2.25], [2.2800000000000002], [2.31], [2.34], [2.37], [2.4], [2.43], [2.46], [2.49], [2.52], [2.5500000000000003], [2.58], [2.61], [2.64], [2.67], [2.7], [2.73], [2.7600000000000002], [2.79], [2.82], [2.85], [2.88], [2.91], [2.94], [2.97]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
Pipeline(steps=[('Imputer', SimpleImputer(strategy='median')),
                ('StdScalar', StandardScaler())])
with X (80, 1) [[0.0], [0.03], [0.06], [0.09], [0.12], [0.15], [0.18], [0.21], [0.24], [0.27], [0.3], [0.33], [0.36], [0.39], [0.42], [0.45], [0.48], [0.6], [0.72], [0.87], [0.99], [1.05], [1.11], [1.1400000000000001], [1.26], [1.32], [1.35], [1.41], [1.44], [1.47], [1.5], [1.53], [1.56], [1.59], [1.62], [1.6500000000000001], [1.68], [1.71], [1.74], [1.77], [1.8], [1.83], [1.86], [1.8900000000000001], [1.92], [1.95], [1.98], [2.0100000000000002], [2.04], [2.07], [2.1], [2.13], [2.16], [2.19], [2.22], [2.25], [2.2800000000000002], [2.31], [2.34], [2.37], [2.4], [2.43], [2.46], [2.49], [2.52], [2.5500000000000003], [2.58], [2.61], [2.64], [2.67], [2.7], [2.73], [2.7600000000000002], [2.79], [2.82], [2.85], [2.88], [2.91], [2.94], [2.97]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [1], [1], [1], [1], [1], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
SimpleImputer(strategy='median')
with X (80, 1) [[0.0], [0.03], [0.06], [0.09], [0.12], [0.15], [0.18], [0.21], [0.24], [0.27], [0.3], [0.33], [0.36], [0.39], [0.42], [0.45], [0.48], [0.6], [0.72], [0.87], [0.99], [1.05], [1.11], [1.1400000000000001], [1.26], [1.32], [1.35], [1.41], [1.44], [1.47], [1.5], [1.53], [1.56], [1.59], [1.62], [1.6500000000000001], [1.68], [1.71], [1.74], [1.77], [1.8], [1.83], [1.86], [1.8900000000000001], [1.92], [1.95], [1.98], [2.0100000000000002], [2.04], [2.07], [2.1], [2.13], [2.16], [2.19], [2.22], [2.25], [2.2800000000000002], [2.31], [2.34], [2.37], [2.4], [2.43], [2.46], [2.49], [2.52], [2.5500000000000003], [2.58], [2.61], [2.64], [2.67], [2.7], [2.73], [2.7600000000000002], [2.79], [2.82], [2.85], [2.88], [2.91], [2.94], [2.97]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [1], [1], [1], [1], [1], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

sklearn > utils > __init__.py > _fit_and_score
> Caller __call__

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 39, 40, 41, 43, 46, 56, 58, 59, 60, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
... > train_indices None

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.0], [0.03], [0.06], [0.09], [0.12], [0.15], [0.18], [0.21], [0.24], [0.27], [0.3], [0.33], [0.36], [0.39], [0.42], [0.45], [0.48], [0.51], [0.54], [0.5700000000000001], [0.6], [0.63], [0.66], [0.6900000000000001], [0.72], [0.75], [0.78], [0.81], [0.84], [0.87], [0.9], [0.93], [0.96], [0.99], [1.02], [1.05], [1.08], [1.11], [1.1400000000000001], [1.17], [1.2], [1.23], [1.26], [1.29], [1.32], [1.35], [1.3800000000000001], [1.41], [1.44], [1.47], [1.5], [1.53], [1.56], [1.59], [1.62], [1.6500000000000001], [1.68], [1.71], [1.74], [1.77], [1.8], [1.83], [1.86], [1.8900000000000001], [1.92], [1.95], [1.98], [2.0100000000000002], [2.04], [2.07], [2.1], [2.13], [2.16], [2.19], [2.22], [2.25], [2.2800000000000002], [2.31], [2.34], [2.37], [2.4], [2.43], [2.46], [2.49], [2.52], [2.5500000000000003], [2.58], [2.61], [2.64], [2.67], [2.7], [2.73], [2.7600000000000002], [2.79], [2.82], [2.85], [2.88], [2.91], [2.94], [2.97]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [33, 35, 37, 38, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61, 63, 64]
... > train_indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 39, 40, 41, 43, 46, 56, 58, 59, 60, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.0], [0.03], [0.06], [0.09], [0.12], [0.15], [0.18], [0.21], [0.24], [0.27], [0.3], [0.33], [0.36], [0.39], [0.42], [0.45], [0.48], [0.51], [0.54], [0.5700000000000001], [0.6], [0.63], [0.66], [0.6900000000000001], [0.72], [0.75], [0.78], [0.81], [0.84], [0.87], [0.9], [0.93], [0.96], [0.99], [1.02], [1.05], [1.08], [1.11], [1.1400000000000001], [1.17], [1.2], [1.23], [1.26], [1.29], [1.32], [1.35], [1.3800000000000001], [1.41], [1.44], [1.47], [1.5], [1.53], [1.56], [1.59], [1.62], [1.6500000000000001], [1.68], [1.71], [1.74], [1.77], [1.8], [1.83], [1.86], [1.8900000000000001], [1.92], [1.95], [1.98], [2.0100000000000002], [2.04], [2.07], [2.1], [2.13], [2.16], [2.19], [2.22], [2.25], [2.2800000000000002], [2.31], [2.34], [2.37], [2.4], [2.43], [2.46], [2.49], [2.52], [2.5500000000000003], [2.58], [2.61], [2.64], [2.67], [2.7], [2.73], [2.7600000000000002], [2.79], [2.82], [2.85], [2.88], [2.91], [2.94], [2.97]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
Pipeline(steps=[('Imputer', SimpleImputer(strategy='median')),
                ('StdScalar', StandardScaler())])
with X (80, 1) [[0.0], [0.03], [0.06], [0.09], [0.12], [0.15], [0.18], [0.21], [0.24], [0.27], [0.3], [0.33], [0.36], [0.39], [0.42], [0.45], [0.48], [0.51], [0.54], [0.5700000000000001], [0.6], [0.63], [0.66], [0.6900000000000001], [0.72], [0.75], [0.78], [0.81], [0.84], [0.87], [0.9], [0.93], [0.96], [1.02], [1.08], [1.17], [1.2], [1.23], [1.29], [1.3800000000000001], [1.68], [1.74], [1.77], [1.8], [1.86], [1.95], [1.98], [2.0100000000000002], [2.04], [2.07], [2.1], [2.13], [2.16], [2.19], [2.22], [2.25], [2.2800000000000002], [2.31], [2.34], [2.37], [2.4], [2.43], [2.46], [2.49], [2.52], [2.5500000000000003], [2.58], [2.61], [2.64], [2.67], [2.7], [2.73], [2.7600000000000002], [2.79], [2.82], [2.85], [2.88], [2.91], [2.94], [2.97]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [1], [1], [1], [1], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
SimpleImputer(strategy='median')
with X (80, 1) [[0.0], [0.03], [0.06], [0.09], [0.12], [0.15], [0.18], [0.21], [0.24], [0.27], [0.3], [0.33], [0.36], [0.39], [0.42], [0.45], [0.48], [0.51], [0.54], [0.5700000000000001], [0.6], [0.63], [0.66], [0.6900000000000001], [0.72], [0.75], [0.78], [0.81], [0.84], [0.87], [0.9], [0.93], [0.96], [1.02], [1.08], [1.17], [1.2], [1.23], [1.29], [1.3800000000000001], [1.68], [1.74], [1.77], [1.8], [1.86], [1.95], [1.98], [2.0100000000000002], [2.04], [2.07], [2.1], [2.13], [2.16], [2.19], [2.22], [2.25], [2.2800000000000002], [2.31], [2.34], [2.37], [2.4], [2.43], [2.46], [2.49], [2.52], [2.5500000000000003], [2.58], [2.61], [2.64], [2.67], [2.7], [2.73], [2.7600000000000002], [2.79], [2.82], [2.85], [2.88], [2.91], [2.94], [2.97]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [1], [1], [1], [1], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

sklearn > utils > __init__.py > _fit_and_score
> Caller __call__

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61, 63, 64, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
... > train_indices None

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.0], [0.03], [0.06], [0.09], [0.12], [0.15], [0.18], [0.21], [0.24], [0.27], [0.3], [0.33], [0.36], [0.39], [0.42], [0.45], [0.48], [0.51], [0.54], [0.5700000000000001], [0.6], [0.63], [0.66], [0.6900000000000001], [0.72], [0.75], [0.78], [0.81], [0.84], [0.87], [0.9], [0.93], [0.96], [0.99], [1.02], [1.05], [1.08], [1.11], [1.1400000000000001], [1.17], [1.2], [1.23], [1.26], [1.29], [1.32], [1.35], [1.3800000000000001], [1.41], [1.44], [1.47], [1.5], [1.53], [1.56], [1.59], [1.62], [1.6500000000000001], [1.68], [1.71], [1.74], [1.77], [1.8], [1.83], [1.86], [1.8900000000000001], [1.92], [1.95], [1.98], [2.0100000000000002], [2.04], [2.07], [2.1], [2.13], [2.16], [2.19], [2.22], [2.25], [2.2800000000000002], [2.31], [2.34], [2.37], [2.4], [2.43], [2.46], [2.49], [2.52], [2.5500000000000003], [2.58], [2.61], [2.64], [2.67], [2.7], [2.73], [2.7600000000000002], [2.79], [2.82], [2.85], [2.88], [2.91], [2.94], [2.97]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [56, 58, 59, 60, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80]
... > train_indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61, 63, 64, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.0], [0.03], [0.06], [0.09], [0.12], [0.15], [0.18], [0.21], [0.24], [0.27], [0.3], [0.33], [0.36], [0.39], [0.42], [0.45], [0.48], [0.51], [0.54], [0.5700000000000001], [0.6], [0.63], [0.66], [0.6900000000000001], [0.72], [0.75], [0.78], [0.81], [0.84], [0.87], [0.9], [0.93], [0.96], [0.99], [1.02], [1.05], [1.08], [1.11], [1.1400000000000001], [1.17], [1.2], [1.23], [1.26], [1.29], [1.32], [1.35], [1.3800000000000001], [1.41], [1.44], [1.47], [1.5], [1.53], [1.56], [1.59], [1.62], [1.6500000000000001], [1.68], [1.71], [1.74], [1.77], [1.8], [1.83], [1.86], [1.8900000000000001], [1.92], [1.95], [1.98], [2.0100000000000002], [2.04], [2.07], [2.1], [2.13], [2.16], [2.19], [2.22], [2.25], [2.2800000000000002], [2.31], [2.34], [2.37], [2.4], [2.43], [2.46], [2.49], [2.52], [2.5500000000000003], [2.58], [2.61], [2.64], [2.67], [2.7], [2.73], [2.7600000000000002], [2.79], [2.82], [2.85], [2.88], [2.91], [2.94], [2.97]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
Pipeline(steps=[('Imputer', SimpleImputer(strategy='median')),
                ('StdScalar', StandardScaler())])
with X (80, 1) [[0.0], [0.03], [0.06], [0.09], [0.12], [0.15], [0.18], [0.21], [0.24], [0.27], [0.3], [0.33], [0.36], [0.39], [0.42], [0.45], [0.48], [0.51], [0.54], [0.5700000000000001], [0.6], [0.63], [0.66], [0.6900000000000001], [0.72], [0.75], [0.78], [0.81], [0.84], [0.87], [0.9], [0.93], [0.96], [0.99], [1.02], [1.05], [1.08], [1.11], [1.1400000000000001], [1.17], [1.2], [1.23], [1.26], [1.29], [1.32], [1.35], [1.3800000000000001], [1.41], [1.44], [1.47], [1.5], [1.53], [1.56], [1.59], [1.62], [1.6500000000000001], [1.71], [1.83], [1.8900000000000001], [1.92], [2.37], [2.43], [2.46], [2.49], [2.52], [2.5500000000000003], [2.58], [2.61], [2.64], [2.67], [2.7], [2.73], [2.7600000000000002], [2.79], [2.82], [2.85], [2.88], [2.91], [2.94], [2.97]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [0], [0], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
SimpleImputer(strategy='median')
with X (80, 1) [[0.0], [0.03], [0.06], [0.09], [0.12], [0.15], [0.18], [0.21], [0.24], [0.27], [0.3], [0.33], [0.36], [0.39], [0.42], [0.45], [0.48], [0.51], [0.54], [0.5700000000000001], [0.6], [0.63], [0.66], [0.6900000000000001], [0.72], [0.75], [0.78], [0.81], [0.84], [0.87], [0.9], [0.93], [0.96], [0.99], [1.02], [1.05], [1.08], [1.11], [1.1400000000000001], [1.17], [1.2], [1.23], [1.26], [1.29], [1.32], [1.35], [1.3800000000000001], [1.41], [1.44], [1.47], [1.5], [1.53], [1.56], [1.59], [1.62], [1.6500000000000001], [1.71], [1.83], [1.8900000000000001], [1.92], [2.37], [2.43], [2.46], [2.49], [2.52], [2.5500000000000003], [2.58], [2.61], [2.64], [2.67], [2.7], [2.73], [2.7600000000000002], [2.79], [2.82], [2.85], [2.88], [2.91], [2.94], [2.97]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [0], [0], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

sklearn > utils > __init__.py > _fit_and_score
> Caller __call__

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80]
... > train_indices None

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.0], [0.03], [0.06], [0.09], [0.12], [0.15], [0.18], [0.21], [0.24], [0.27], [0.3], [0.33], [0.36], [0.39], [0.42], [0.45], [0.48], [0.51], [0.54], [0.5700000000000001], [0.6], [0.63], [0.66], [0.6900000000000001], [0.72], [0.75], [0.78], [0.81], [0.84], [0.87], [0.9], [0.93], [0.96], [0.99], [1.02], [1.05], [1.08], [1.11], [1.1400000000000001], [1.17], [1.2], [1.23], [1.26], [1.29], [1.32], [1.35], [1.3800000000000001], [1.41], [1.44], [1.47], [1.5], [1.53], [1.56], [1.59], [1.62], [1.6500000000000001], [1.68], [1.71], [1.74], [1.77], [1.8], [1.83], [1.86], [1.8900000000000001], [1.92], [1.95], [1.98], [2.0100000000000002], [2.04], [2.07], [2.1], [2.13], [2.16], [2.19], [2.22], [2.25], [2.2800000000000002], [2.31], [2.34], [2.37], [2.4], [2.43], [2.46], [2.49], [2.52], [2.5500000000000003], [2.58], [2.61], [2.64], [2.67], [2.7], [2.73], [2.7600000000000002], [2.79], [2.82], [2.85], [2.88], [2.91], [2.94], [2.97]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
... > train_indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.0], [0.03], [0.06], [0.09], [0.12], [0.15], [0.18], [0.21], [0.24], [0.27], [0.3], [0.33], [0.36], [0.39], [0.42], [0.45], [0.48], [0.51], [0.54], [0.5700000000000001], [0.6], [0.63], [0.66], [0.6900000000000001], [0.72], [0.75], [0.78], [0.81], [0.84], [0.87], [0.9], [0.93], [0.96], [0.99], [1.02], [1.05], [1.08], [1.11], [1.1400000000000001], [1.17], [1.2], [1.23], [1.26], [1.29], [1.32], [1.35], [1.3800000000000001], [1.41], [1.44], [1.47], [1.5], [1.53], [1.56], [1.59], [1.62], [1.6500000000000001], [1.68], [1.71], [1.74], [1.77], [1.8], [1.83], [1.86], [1.8900000000000001], [1.92], [1.95], [1.98], [2.0100000000000002], [2.04], [2.07], [2.1], [2.13], [2.16], [2.19], [2.22], [2.25], [2.2800000000000002], [2.31], [2.34], [2.37], [2.4], [2.43], [2.46], [2.49], [2.52], [2.5500000000000003], [2.58], [2.61], [2.64], [2.67], [2.7], [2.73], [2.7600000000000002], [2.79], [2.82], [2.85], [2.88], [2.91], [2.94], [2.97]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
Pipeline(steps=[('Imputer', SimpleImputer(strategy='median')),
                ('StdScalar', StandardScaler())])
with X (80, 1) [[0.0], [0.03], [0.06], [0.09], [0.12], [0.15], [0.18], [0.21], [0.24], [0.27], [0.3], [0.33], [0.36], [0.39], [0.42], [0.45], [0.48], [0.51], [0.54], [0.5700000000000001], [0.6], [0.63], [0.66], [0.6900000000000001], [0.72], [0.75], [0.78], [0.81], [0.84], [0.87], [0.9], [0.93], [0.96], [0.99], [1.02], [1.05], [1.08], [1.11], [1.1400000000000001], [1.17], [1.2], [1.23], [1.26], [1.29], [1.32], [1.35], [1.3800000000000001], [1.41], [1.44], [1.47], [1.5], [1.53], [1.56], [1.59], [1.62], [1.6500000000000001], [1.68], [1.71], [1.74], [1.77], [1.8], [1.83], [1.86], [1.8900000000000001], [1.92], [1.95], [1.98], [2.0100000000000002], [2.04], [2.07], [2.1], [2.13], [2.16], [2.19], [2.22], [2.25], [2.2800000000000002], [2.31], [2.34], [2.4]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [1]]

....................
Fitting transformer:
SimpleImputer(strategy='median')
with X (80, 1) [[0.0], [0.03], [0.06], [0.09], [0.12], [0.15], [0.18], [0.21], [0.24], [0.27], [0.3], [0.33], [0.36], [0.39], [0.42], [0.45], [0.48], [0.51], [0.54], [0.5700000000000001], [0.6], [0.63], [0.66], [0.6900000000000001], [0.72], [0.75], [0.78], [0.81], [0.84], [0.87], [0.9], [0.93], [0.96], [0.99], [1.02], [1.05], [1.08], [1.11], [1.1400000000000001], [1.17], [1.2], [1.23], [1.26], [1.29], [1.32], [1.35], [1.3800000000000001], [1.41], [1.44], [1.47], [1.5], [1.53], [1.56], [1.59], [1.62], [1.6500000000000001], [1.68], [1.71], [1.74], [1.77], [1.8], [1.83], [1.86], [1.8900000000000001], [1.92], [1.95], [1.98], [2.0100000000000002], [2.04], [2.07], [2.1], [2.13], [2.16], [2.19], [2.22], [2.25], [2.2800000000000002], [2.31], [2.34], [2.4]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [1]]

RESULTS:
{'fit_error': None, 'test_scores': {'score': 0.55}, 'fit_time': 0.09193062782287598, 'score_time': 0.0}
{'fit_error': None, 'test_scores': {'score': 0.15}, 'fit_time': 0.09425520896911621, 'score_time': 0.0}
{'fit_error': None, 'test_scores': {'score': 0.3}, 'fit_time': 0.0942533016204834, 'score_time': 0.0}
{'fit_error': None, 'test_scores': {'score': 0.5}, 'fit_time': 0.09934520721435547, 'score_time': 0.0}
{'fit_error': None, 'test_scores': {'score': 0.5}, 'fit_time': 0.09424972534179688, 'score_time': 0.0}

_get_best_new_feature_score > Feature #1 > X_new
------------------------------------------------
(100, 1) [[0.01], [0.04], [0.07], [0.1], [0.13], [0.16], [0.19], [0.22], [0.25], [0.28], [0.31], [0.34], [0.37], [0.4], [0.43], [0.46], [0.49], [0.52], [0.55], [0.58], [0.61], [0.64], [0.67], [0.7000000000000001], [0.73], [0.76], [0.79], [0.8200000000000001], [0.85], [0.88], [0.91], [0.9400000000000001], [0.97], [1.0], [1.03], [1.06], [1.09], [1.12], [1.1500000000000001], [1.18], [1.21], [1.24], [1.27], [1.3], [1.33], [1.36], [1.3900000000000001], [1.42], [1.45], [1.48], [1.51], [1.54], [1.57], [1.6], [1.6300000000000001], [1.6600000000000001], [1.69], [1.72], [1.75], [1.78], [1.81], [1.84], [1.87], [1.9000000000000001], [1.93], [1.96], [1.99], [2.02], [2.05], [2.08], [2.11], [2.14], [2.17], [2.2], [2.23], [2.2600000000000002], [2.29], [2.32], [2.35], [2.38], [2.41], [2.44], [2.47], [2.5], [2.5300000000000002], [2.56], [2.59], [2.62], [2.65], [2.68], [2.71], [2.74], [2.77], [2.8000000000000003], [2.83], [2.86], [2.89], [2.92], [2.95], [2.98]]

sklearn > utils > __init__.py > _fit_and_score
> Caller __call__

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
... > train_indices None

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.01], [0.04], [0.07], [0.1], [0.13], [0.16], [0.19], [0.22], [0.25], [0.28], [0.31], [0.34], [0.37], [0.4], [0.43], [0.46], [0.49], [0.52], [0.55], [0.58], [0.61], [0.64], [0.67], [0.7000000000000001], [0.73], [0.76], [0.79], [0.8200000000000001], [0.85], [0.88], [0.91], [0.9400000000000001], [0.97], [1.0], [1.03], [1.06], [1.09], [1.12], [1.1500000000000001], [1.18], [1.21], [1.24], [1.27], [1.3], [1.33], [1.36], [1.3900000000000001], [1.42], [1.45], [1.48], [1.51], [1.54], [1.57], [1.6], [1.6300000000000001], [1.6600000000000001], [1.69], [1.72], [1.75], [1.78], [1.81], [1.84], [1.87], [1.9000000000000001], [1.93], [1.96], [1.99], [2.02], [2.05], [2.08], [2.11], [2.14], [2.17], [2.2], [2.23], [2.2600000000000002], [2.29], [2.32], [2.35], [2.38], [2.41], [2.44], [2.47], [2.5], [2.5300000000000002], [2.56], [2.59], [2.62], [2.65], [2.68], [2.71], [2.74], [2.77], [2.8000000000000003], [2.83], [2.86], [2.89], [2.92], [2.95], [2.98]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 24, 29]
... > train_indices [17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.01], [0.04], [0.07], [0.1], [0.13], [0.16], [0.19], [0.22], [0.25], [0.28], [0.31], [0.34], [0.37], [0.4], [0.43], [0.46], [0.49], [0.52], [0.55], [0.58], [0.61], [0.64], [0.67], [0.7000000000000001], [0.73], [0.76], [0.79], [0.8200000000000001], [0.85], [0.88], [0.91], [0.9400000000000001], [0.97], [1.0], [1.03], [1.06], [1.09], [1.12], [1.1500000000000001], [1.18], [1.21], [1.24], [1.27], [1.3], [1.33], [1.36], [1.3900000000000001], [1.42], [1.45], [1.48], [1.51], [1.54], [1.57], [1.6], [1.6300000000000001], [1.6600000000000001], [1.69], [1.72], [1.75], [1.78], [1.81], [1.84], [1.87], [1.9000000000000001], [1.93], [1.96], [1.99], [2.02], [2.05], [2.08], [2.11], [2.14], [2.17], [2.2], [2.23], [2.2600000000000002], [2.29], [2.32], [2.35], [2.38], [2.41], [2.44], [2.47], [2.5], [2.5300000000000002], [2.56], [2.59], [2.62], [2.65], [2.68], [2.71], [2.74], [2.77], [2.8000000000000003], [2.83], [2.86], [2.89], [2.92], [2.95], [2.98]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
Pipeline(steps=[('Imputer', SimpleImputer(strategy='median')),
                ('StdScalar', StandardScaler())])
with X (80, 1) [[0.52], [0.55], [0.58], [0.64], [0.67], [0.7000000000000001], [0.76], [0.79], [0.8200000000000001], [0.85], [0.91], [0.9400000000000001], [0.97], [1.0], [1.03], [1.06], [1.09], [1.12], [1.1500000000000001], [1.18], [1.21], [1.24], [1.27], [1.3], [1.33], [1.36], [1.3900000000000001], [1.42], [1.45], [1.48], [1.51], [1.54], [1.57], [1.6], [1.6300000000000001], [1.6600000000000001], [1.69], [1.72], [1.75], [1.78], [1.81], [1.84], [1.87], [1.9000000000000001], [1.93], [1.96], [1.99], [2.02], [2.05], [2.08], [2.11], [2.14], [2.17], [2.2], [2.23], [2.2600000000000002], [2.29], [2.32], [2.35], [2.38], [2.41], [2.44], [2.47], [2.5], [2.5300000000000002], [2.56], [2.59], [2.62], [2.65], [2.68], [2.71], [2.74], [2.77], [2.8000000000000003], [2.83], [2.86], [2.89], [2.92], [2.95], [2.98]]
with y 80 [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
SimpleImputer(strategy='median')
with X (80, 1) [[0.52], [0.55], [0.58], [0.64], [0.67], [0.7000000000000001], [0.76], [0.79], [0.8200000000000001], [0.85], [0.91], [0.9400000000000001], [0.97], [1.0], [1.03], [1.06], [1.09], [1.12], [1.1500000000000001], [1.18], [1.21], [1.24], [1.27], [1.3], [1.33], [1.36], [1.3900000000000001], [1.42], [1.45], [1.48], [1.51], [1.54], [1.57], [1.6], [1.6300000000000001], [1.6600000000000001], [1.69], [1.72], [1.75], [1.78], [1.81], [1.84], [1.87], [1.9000000000000001], [1.93], [1.96], [1.99], [2.02], [2.05], [2.08], [2.11], [2.14], [2.17], [2.2], [2.23], [2.2600000000000002], [2.29], [2.32], [2.35], [2.38], [2.41], [2.44], [2.47], [2.5], [2.5300000000000002], [2.56], [2.59], [2.62], [2.65], [2.68], [2.71], [2.74], [2.77], [2.8000000000000003], [2.83], [2.86], [2.89], [2.92], [2.95], [2.98]]
with y 80 [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

sklearn > utils > __init__.py > _fit_and_score
> Caller __call__

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 24, 29, 33, 35, 37, 38, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
... > train_indices None

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.01], [0.04], [0.07], [0.1], [0.13], [0.16], [0.19], [0.22], [0.25], [0.28], [0.31], [0.34], [0.37], [0.4], [0.43], [0.46], [0.49], [0.52], [0.55], [0.58], [0.61], [0.64], [0.67], [0.7000000000000001], [0.73], [0.76], [0.79], [0.8200000000000001], [0.85], [0.88], [0.91], [0.9400000000000001], [0.97], [1.0], [1.03], [1.06], [1.09], [1.12], [1.1500000000000001], [1.18], [1.21], [1.24], [1.27], [1.3], [1.33], [1.36], [1.3900000000000001], [1.42], [1.45], [1.48], [1.51], [1.54], [1.57], [1.6], [1.6300000000000001], [1.6600000000000001], [1.69], [1.72], [1.75], [1.78], [1.81], [1.84], [1.87], [1.9000000000000001], [1.93], [1.96], [1.99], [2.02], [2.05], [2.08], [2.11], [2.14], [2.17], [2.2], [2.23], [2.2600000000000002], [2.29], [2.32], [2.35], [2.38], [2.41], [2.44], [2.47], [2.5], [2.5300000000000002], [2.56], [2.59], [2.62], [2.65], [2.68], [2.71], [2.74], [2.77], [2.8000000000000003], [2.83], [2.86], [2.89], [2.92], [2.95], [2.98]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 36, 39, 40, 41, 43, 46]
... > train_indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 24, 29, 33, 35, 37, 38, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.01], [0.04], [0.07], [0.1], [0.13], [0.16], [0.19], [0.22], [0.25], [0.28], [0.31], [0.34], [0.37], [0.4], [0.43], [0.46], [0.49], [0.52], [0.55], [0.58], [0.61], [0.64], [0.67], [0.7000000000000001], [0.73], [0.76], [0.79], [0.8200000000000001], [0.85], [0.88], [0.91], [0.9400000000000001], [0.97], [1.0], [1.03], [1.06], [1.09], [1.12], [1.1500000000000001], [1.18], [1.21], [1.24], [1.27], [1.3], [1.33], [1.36], [1.3900000000000001], [1.42], [1.45], [1.48], [1.51], [1.54], [1.57], [1.6], [1.6300000000000001], [1.6600000000000001], [1.69], [1.72], [1.75], [1.78], [1.81], [1.84], [1.87], [1.9000000000000001], [1.93], [1.96], [1.99], [2.02], [2.05], [2.08], [2.11], [2.14], [2.17], [2.2], [2.23], [2.2600000000000002], [2.29], [2.32], [2.35], [2.38], [2.41], [2.44], [2.47], [2.5], [2.5300000000000002], [2.56], [2.59], [2.62], [2.65], [2.68], [2.71], [2.74], [2.77], [2.8000000000000003], [2.83], [2.86], [2.89], [2.92], [2.95], [2.98]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
Pipeline(steps=[('Imputer', SimpleImputer(strategy='median')),
                ('StdScalar', StandardScaler())])
with X (80, 1) [[0.01], [0.04], [0.07], [0.1], [0.13], [0.16], [0.19], [0.22], [0.25], [0.28], [0.31], [0.34], [0.37], [0.4], [0.43], [0.46], [0.49], [0.61], [0.73], [0.88], [1.0], [1.06], [1.12], [1.1500000000000001], [1.27], [1.33], [1.36], [1.42], [1.45], [1.48], [1.51], [1.54], [1.57], [1.6], [1.6300000000000001], [1.6600000000000001], [1.69], [1.72], [1.75], [1.78], [1.81], [1.84], [1.87], [1.9000000000000001], [1.93], [1.96], [1.99], [2.02], [2.05], [2.08], [2.11], [2.14], [2.17], [2.2], [2.23], [2.2600000000000002], [2.29], [2.32], [2.35], [2.38], [2.41], [2.44], [2.47], [2.5], [2.5300000000000002], [2.56], [2.59], [2.62], [2.65], [2.68], [2.71], [2.74], [2.77], [2.8000000000000003], [2.83], [2.86], [2.89], [2.92], [2.95], [2.98]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [1], [1], [1], [1], [1], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
SimpleImputer(strategy='median')
with X (80, 1) [[0.01], [0.04], [0.07], [0.1], [0.13], [0.16], [0.19], [0.22], [0.25], [0.28], [0.31], [0.34], [0.37], [0.4], [0.43], [0.46], [0.49], [0.61], [0.73], [0.88], [1.0], [1.06], [1.12], [1.1500000000000001], [1.27], [1.33], [1.36], [1.42], [1.45], [1.48], [1.51], [1.54], [1.57], [1.6], [1.6300000000000001], [1.6600000000000001], [1.69], [1.72], [1.75], [1.78], [1.81], [1.84], [1.87], [1.9000000000000001], [1.93], [1.96], [1.99], [2.02], [2.05], [2.08], [2.11], [2.14], [2.17], [2.2], [2.23], [2.2600000000000002], [2.29], [2.32], [2.35], [2.38], [2.41], [2.44], [2.47], [2.5], [2.5300000000000002], [2.56], [2.59], [2.62], [2.65], [2.68], [2.71], [2.74], [2.77], [2.8000000000000003], [2.83], [2.86], [2.89], [2.92], [2.95], [2.98]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [1], [1], [1], [1], [1], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

sklearn > utils > __init__.py > _fit_and_score
> Caller __call__

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 39, 40, 41, 43, 46, 56, 58, 59, 60, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
... > train_indices None

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.01], [0.04], [0.07], [0.1], [0.13], [0.16], [0.19], [0.22], [0.25], [0.28], [0.31], [0.34], [0.37], [0.4], [0.43], [0.46], [0.49], [0.52], [0.55], [0.58], [0.61], [0.64], [0.67], [0.7000000000000001], [0.73], [0.76], [0.79], [0.8200000000000001], [0.85], [0.88], [0.91], [0.9400000000000001], [0.97], [1.0], [1.03], [1.06], [1.09], [1.12], [1.1500000000000001], [1.18], [1.21], [1.24], [1.27], [1.3], [1.33], [1.36], [1.3900000000000001], [1.42], [1.45], [1.48], [1.51], [1.54], [1.57], [1.6], [1.6300000000000001], [1.6600000000000001], [1.69], [1.72], [1.75], [1.78], [1.81], [1.84], [1.87], [1.9000000000000001], [1.93], [1.96], [1.99], [2.02], [2.05], [2.08], [2.11], [2.14], [2.17], [2.2], [2.23], [2.2600000000000002], [2.29], [2.32], [2.35], [2.38], [2.41], [2.44], [2.47], [2.5], [2.5300000000000002], [2.56], [2.59], [2.62], [2.65], [2.68], [2.71], [2.74], [2.77], [2.8000000000000003], [2.83], [2.86], [2.89], [2.92], [2.95], [2.98]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [33, 35, 37, 38, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61, 63, 64]
... > train_indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 39, 40, 41, 43, 46, 56, 58, 59, 60, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.01], [0.04], [0.07], [0.1], [0.13], [0.16], [0.19], [0.22], [0.25], [0.28], [0.31], [0.34], [0.37], [0.4], [0.43], [0.46], [0.49], [0.52], [0.55], [0.58], [0.61], [0.64], [0.67], [0.7000000000000001], [0.73], [0.76], [0.79], [0.8200000000000001], [0.85], [0.88], [0.91], [0.9400000000000001], [0.97], [1.0], [1.03], [1.06], [1.09], [1.12], [1.1500000000000001], [1.18], [1.21], [1.24], [1.27], [1.3], [1.33], [1.36], [1.3900000000000001], [1.42], [1.45], [1.48], [1.51], [1.54], [1.57], [1.6], [1.6300000000000001], [1.6600000000000001], [1.69], [1.72], [1.75], [1.78], [1.81], [1.84], [1.87], [1.9000000000000001], [1.93], [1.96], [1.99], [2.02], [2.05], [2.08], [2.11], [2.14], [2.17], [2.2], [2.23], [2.2600000000000002], [2.29], [2.32], [2.35], [2.38], [2.41], [2.44], [2.47], [2.5], [2.5300000000000002], [2.56], [2.59], [2.62], [2.65], [2.68], [2.71], [2.74], [2.77], [2.8000000000000003], [2.83], [2.86], [2.89], [2.92], [2.95], [2.98]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
Pipeline(steps=[('Imputer', SimpleImputer(strategy='median')),
                ('StdScalar', StandardScaler())])
with X (80, 1) [[0.01], [0.04], [0.07], [0.1], [0.13], [0.16], [0.19], [0.22], [0.25], [0.28], [0.31], [0.34], [0.37], [0.4], [0.43], [0.46], [0.49], [0.52], [0.55], [0.58], [0.61], [0.64], [0.67], [0.7000000000000001], [0.73], [0.76], [0.79], [0.8200000000000001], [0.85], [0.88], [0.91], [0.9400000000000001], [0.97], [1.03], [1.09], [1.18], [1.21], [1.24], [1.3], [1.3900000000000001], [1.69], [1.75], [1.78], [1.81], [1.87], [1.96], [1.99], [2.02], [2.05], [2.08], [2.11], [2.14], [2.17], [2.2], [2.23], [2.2600000000000002], [2.29], [2.32], [2.35], [2.38], [2.41], [2.44], [2.47], [2.5], [2.5300000000000002], [2.56], [2.59], [2.62], [2.65], [2.68], [2.71], [2.74], [2.77], [2.8000000000000003], [2.83], [2.86], [2.89], [2.92], [2.95], [2.98]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [1], [1], [1], [1], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
SimpleImputer(strategy='median')
with X (80, 1) [[0.01], [0.04], [0.07], [0.1], [0.13], [0.16], [0.19], [0.22], [0.25], [0.28], [0.31], [0.34], [0.37], [0.4], [0.43], [0.46], [0.49], [0.52], [0.55], [0.58], [0.61], [0.64], [0.67], [0.7000000000000001], [0.73], [0.76], [0.79], [0.8200000000000001], [0.85], [0.88], [0.91], [0.9400000000000001], [0.97], [1.03], [1.09], [1.18], [1.21], [1.24], [1.3], [1.3900000000000001], [1.69], [1.75], [1.78], [1.81], [1.87], [1.96], [1.99], [2.02], [2.05], [2.08], [2.11], [2.14], [2.17], [2.2], [2.23], [2.2600000000000002], [2.29], [2.32], [2.35], [2.38], [2.41], [2.44], [2.47], [2.5], [2.5300000000000002], [2.56], [2.59], [2.62], [2.65], [2.68], [2.71], [2.74], [2.77], [2.8000000000000003], [2.83], [2.86], [2.89], [2.92], [2.95], [2.98]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [1], [1], [1], [1], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

sklearn > utils > __init__.py > _fit_and_score
> Caller __call__

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61, 63, 64, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
... > train_indices None

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.01], [0.04], [0.07], [0.1], [0.13], [0.16], [0.19], [0.22], [0.25], [0.28], [0.31], [0.34], [0.37], [0.4], [0.43], [0.46], [0.49], [0.52], [0.55], [0.58], [0.61], [0.64], [0.67], [0.7000000000000001], [0.73], [0.76], [0.79], [0.8200000000000001], [0.85], [0.88], [0.91], [0.9400000000000001], [0.97], [1.0], [1.03], [1.06], [1.09], [1.12], [1.1500000000000001], [1.18], [1.21], [1.24], [1.27], [1.3], [1.33], [1.36], [1.3900000000000001], [1.42], [1.45], [1.48], [1.51], [1.54], [1.57], [1.6], [1.6300000000000001], [1.6600000000000001], [1.69], [1.72], [1.75], [1.78], [1.81], [1.84], [1.87], [1.9000000000000001], [1.93], [1.96], [1.99], [2.02], [2.05], [2.08], [2.11], [2.14], [2.17], [2.2], [2.23], [2.2600000000000002], [2.29], [2.32], [2.35], [2.38], [2.41], [2.44], [2.47], [2.5], [2.5300000000000002], [2.56], [2.59], [2.62], [2.65], [2.68], [2.71], [2.74], [2.77], [2.8000000000000003], [2.83], [2.86], [2.89], [2.92], [2.95], [2.98]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [56, 58, 59, 60, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80]
... > train_indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61, 63, 64, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.01], [0.04], [0.07], [0.1], [0.13], [0.16], [0.19], [0.22], [0.25], [0.28], [0.31], [0.34], [0.37], [0.4], [0.43], [0.46], [0.49], [0.52], [0.55], [0.58], [0.61], [0.64], [0.67], [0.7000000000000001], [0.73], [0.76], [0.79], [0.8200000000000001], [0.85], [0.88], [0.91], [0.9400000000000001], [0.97], [1.0], [1.03], [1.06], [1.09], [1.12], [1.1500000000000001], [1.18], [1.21], [1.24], [1.27], [1.3], [1.33], [1.36], [1.3900000000000001], [1.42], [1.45], [1.48], [1.51], [1.54], [1.57], [1.6], [1.6300000000000001], [1.6600000000000001], [1.69], [1.72], [1.75], [1.78], [1.81], [1.84], [1.87], [1.9000000000000001], [1.93], [1.96], [1.99], [2.02], [2.05], [2.08], [2.11], [2.14], [2.17], [2.2], [2.23], [2.2600000000000002], [2.29], [2.32], [2.35], [2.38], [2.41], [2.44], [2.47], [2.5], [2.5300000000000002], [2.56], [2.59], [2.62], [2.65], [2.68], [2.71], [2.74], [2.77], [2.8000000000000003], [2.83], [2.86], [2.89], [2.92], [2.95], [2.98]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
Pipeline(steps=[('Imputer', SimpleImputer(strategy='median')),
                ('StdScalar', StandardScaler())])
with X (80, 1) [[0.01], [0.04], [0.07], [0.1], [0.13], [0.16], [0.19], [0.22], [0.25], [0.28], [0.31], [0.34], [0.37], [0.4], [0.43], [0.46], [0.49], [0.52], [0.55], [0.58], [0.61], [0.64], [0.67], [0.7000000000000001], [0.73], [0.76], [0.79], [0.8200000000000001], [0.85], [0.88], [0.91], [0.9400000000000001], [0.97], [1.0], [1.03], [1.06], [1.09], [1.12], [1.1500000000000001], [1.18], [1.21], [1.24], [1.27], [1.3], [1.33], [1.36], [1.3900000000000001], [1.42], [1.45], [1.48], [1.51], [1.54], [1.57], [1.6], [1.6300000000000001], [1.6600000000000001], [1.72], [1.84], [1.9000000000000001], [1.93], [2.38], [2.44], [2.47], [2.5], [2.5300000000000002], [2.56], [2.59], [2.62], [2.65], [2.68], [2.71], [2.74], [2.77], [2.8000000000000003], [2.83], [2.86], [2.89], [2.92], [2.95], [2.98]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [0], [0], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
SimpleImputer(strategy='median')
with X (80, 1) [[0.01], [0.04], [0.07], [0.1], [0.13], [0.16], [0.19], [0.22], [0.25], [0.28], [0.31], [0.34], [0.37], [0.4], [0.43], [0.46], [0.49], [0.52], [0.55], [0.58], [0.61], [0.64], [0.67], [0.7000000000000001], [0.73], [0.76], [0.79], [0.8200000000000001], [0.85], [0.88], [0.91], [0.9400000000000001], [0.97], [1.0], [1.03], [1.06], [1.09], [1.12], [1.1500000000000001], [1.18], [1.21], [1.24], [1.27], [1.3], [1.33], [1.36], [1.3900000000000001], [1.42], [1.45], [1.48], [1.51], [1.54], [1.57], [1.6], [1.6300000000000001], [1.6600000000000001], [1.72], [1.84], [1.9000000000000001], [1.93], [2.38], [2.44], [2.47], [2.5], [2.5300000000000002], [2.56], [2.59], [2.62], [2.65], [2.68], [2.71], [2.74], [2.77], [2.8000000000000003], [2.83], [2.86], [2.89], [2.92], [2.95], [2.98]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [0], [0], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

sklearn > utils > __init__.py > _fit_and_score
> Caller __call__

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80]
... > train_indices None

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.01], [0.04], [0.07], [0.1], [0.13], [0.16], [0.19], [0.22], [0.25], [0.28], [0.31], [0.34], [0.37], [0.4], [0.43], [0.46], [0.49], [0.52], [0.55], [0.58], [0.61], [0.64], [0.67], [0.7000000000000001], [0.73], [0.76], [0.79], [0.8200000000000001], [0.85], [0.88], [0.91], [0.9400000000000001], [0.97], [1.0], [1.03], [1.06], [1.09], [1.12], [1.1500000000000001], [1.18], [1.21], [1.24], [1.27], [1.3], [1.33], [1.36], [1.3900000000000001], [1.42], [1.45], [1.48], [1.51], [1.54], [1.57], [1.6], [1.6300000000000001], [1.6600000000000001], [1.69], [1.72], [1.75], [1.78], [1.81], [1.84], [1.87], [1.9000000000000001], [1.93], [1.96], [1.99], [2.02], [2.05], [2.08], [2.11], [2.14], [2.17], [2.2], [2.23], [2.2600000000000002], [2.29], [2.32], [2.35], [2.38], [2.41], [2.44], [2.47], [2.5], [2.5300000000000002], [2.56], [2.59], [2.62], [2.65], [2.68], [2.71], [2.74], [2.77], [2.8000000000000003], [2.83], [2.86], [2.89], [2.92], [2.95], [2.98]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
... > train_indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.01], [0.04], [0.07], [0.1], [0.13], [0.16], [0.19], [0.22], [0.25], [0.28], [0.31], [0.34], [0.37], [0.4], [0.43], [0.46], [0.49], [0.52], [0.55], [0.58], [0.61], [0.64], [0.67], [0.7000000000000001], [0.73], [0.76], [0.79], [0.8200000000000001], [0.85], [0.88], [0.91], [0.9400000000000001], [0.97], [1.0], [1.03], [1.06], [1.09], [1.12], [1.1500000000000001], [1.18], [1.21], [1.24], [1.27], [1.3], [1.33], [1.36], [1.3900000000000001], [1.42], [1.45], [1.48], [1.51], [1.54], [1.57], [1.6], [1.6300000000000001], [1.6600000000000001], [1.69], [1.72], [1.75], [1.78], [1.81], [1.84], [1.87], [1.9000000000000001], [1.93], [1.96], [1.99], [2.02], [2.05], [2.08], [2.11], [2.14], [2.17], [2.2], [2.23], [2.2600000000000002], [2.29], [2.32], [2.35], [2.38], [2.41], [2.44], [2.47], [2.5], [2.5300000000000002], [2.56], [2.59], [2.62], [2.65], [2.68], [2.71], [2.74], [2.77], [2.8000000000000003], [2.83], [2.86], [2.89], [2.92], [2.95], [2.98]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
Pipeline(steps=[('Imputer', SimpleImputer(strategy='median')),
                ('StdScalar', StandardScaler())])
with X (80, 1) [[0.01], [0.04], [0.07], [0.1], [0.13], [0.16], [0.19], [0.22], [0.25], [0.28], [0.31], [0.34], [0.37], [0.4], [0.43], [0.46], [0.49], [0.52], [0.55], [0.58], [0.61], [0.64], [0.67], [0.7000000000000001], [0.73], [0.76], [0.79], [0.8200000000000001], [0.85], [0.88], [0.91], [0.9400000000000001], [0.97], [1.0], [1.03], [1.06], [1.09], [1.12], [1.1500000000000001], [1.18], [1.21], [1.24], [1.27], [1.3], [1.33], [1.36], [1.3900000000000001], [1.42], [1.45], [1.48], [1.51], [1.54], [1.57], [1.6], [1.6300000000000001], [1.6600000000000001], [1.69], [1.72], [1.75], [1.78], [1.81], [1.84], [1.87], [1.9000000000000001], [1.93], [1.96], [1.99], [2.02], [2.05], [2.08], [2.11], [2.14], [2.17], [2.2], [2.23], [2.2600000000000002], [2.29], [2.32], [2.35], [2.41]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [1]]

....................
Fitting transformer:
SimpleImputer(strategy='median')
with X (80, 1) [[0.01], [0.04], [0.07], [0.1], [0.13], [0.16], [0.19], [0.22], [0.25], [0.28], [0.31], [0.34], [0.37], [0.4], [0.43], [0.46], [0.49], [0.52], [0.55], [0.58], [0.61], [0.64], [0.67], [0.7000000000000001], [0.73], [0.76], [0.79], [0.8200000000000001], [0.85], [0.88], [0.91], [0.9400000000000001], [0.97], [1.0], [1.03], [1.06], [1.09], [1.12], [1.1500000000000001], [1.18], [1.21], [1.24], [1.27], [1.3], [1.33], [1.36], [1.3900000000000001], [1.42], [1.45], [1.48], [1.51], [1.54], [1.57], [1.6], [1.6300000000000001], [1.6600000000000001], [1.69], [1.72], [1.75], [1.78], [1.81], [1.84], [1.87], [1.9000000000000001], [1.93], [1.96], [1.99], [2.02], [2.05], [2.08], [2.11], [2.14], [2.17], [2.2], [2.23], [2.2600000000000002], [2.29], [2.32], [2.35], [2.41]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [1]]

RESULTS:
{'fit_error': None, 'test_scores': {'score': 0.55}, 'fit_time': 0.07865500450134277, 'score_time': 0.0}
{'fit_error': None, 'test_scores': {'score': 0.15}, 'fit_time': 0.07863593101501465, 'score_time': 0.0}
{'fit_error': None, 'test_scores': {'score': 0.3}, 'fit_time': 0.07863354682922363, 'score_time': 0.0}
{'fit_error': None, 'test_scores': {'score': 0.5}, 'fit_time': 0.07858538627624512, 'score_time': 0.0}
{'fit_error': None, 'test_scores': {'score': 0.5}, 'fit_time': 0.08209037780761719, 'score_time': 0.0}

_get_best_new_feature_score > Feature #2 > X_new
------------------------------------------------
(100, 1) [[0.02], [0.05], [0.08], [0.11], [0.14], [0.17], [0.2], [0.23], [0.26], [0.29], [0.32], [0.35000000000000003], [0.38], [0.41000000000000003], [0.44], [0.47000000000000003], [0.5], [0.53], [0.56], [0.59], [0.62], [0.65], [0.68], [0.71], [0.74], [0.77], [0.8], [0.8300000000000001], [0.86], [0.89], [0.92], [0.9500000000000001], [0.98], [1.01], [1.04], [1.07], [1.1], [1.1300000000000001], [1.16], [1.19], [1.22], [1.25], [1.28], [1.31], [1.34], [1.37], [1.4000000000000001], [1.43], [1.46], [1.49], [1.52], [1.55], [1.58], [1.61], [1.6400000000000001], [1.67], [1.7], [1.73], [1.76], [1.79], [1.82], [1.85], [1.8800000000000001], [1.9100000000000001], [1.94], [1.97], [2.0], [2.0300000000000002], [2.06], [2.09], [2.12], [2.15], [2.18], [2.21], [2.24], [2.27], [2.3000000000000003], [2.33], [2.36], [2.39], [2.42], [2.45], [2.48], [2.5100000000000002], [2.54], [2.57], [2.6], [2.63], [2.66], [2.69], [2.72], [2.75], [2.7800000000000002], [2.81], [2.84], [2.87], [2.9], [2.93], [2.96], [2.99]]

sklearn > utils > __init__.py > _fit_and_score
> Caller __call__

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
... > train_indices None

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.02], [0.05], [0.08], [0.11], [0.14], [0.17], [0.2], [0.23], [0.26], [0.29], [0.32], [0.35000000000000003], [0.38], [0.41000000000000003], [0.44], [0.47000000000000003], [0.5], [0.53], [0.56], [0.59], [0.62], [0.65], [0.68], [0.71], [0.74], [0.77], [0.8], [0.8300000000000001], [0.86], [0.89], [0.92], [0.9500000000000001], [0.98], [1.01], [1.04], [1.07], [1.1], [1.1300000000000001], [1.16], [1.19], [1.22], [1.25], [1.28], [1.31], [1.34], [1.37], [1.4000000000000001], [1.43], [1.46], [1.49], [1.52], [1.55], [1.58], [1.61], [1.6400000000000001], [1.67], [1.7], [1.73], [1.76], [1.79], [1.82], [1.85], [1.8800000000000001], [1.9100000000000001], [1.94], [1.97], [2.0], [2.0300000000000002], [2.06], [2.09], [2.12], [2.15], [2.18], [2.21], [2.24], [2.27], [2.3000000000000003], [2.33], [2.36], [2.39], [2.42], [2.45], [2.48], [2.5100000000000002], [2.54], [2.57], [2.6], [2.63], [2.66], [2.69], [2.72], [2.75], [2.7800000000000002], [2.81], [2.84], [2.87], [2.9], [2.93], [2.96], [2.99]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 24, 29]
... > train_indices [17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.02], [0.05], [0.08], [0.11], [0.14], [0.17], [0.2], [0.23], [0.26], [0.29], [0.32], [0.35000000000000003], [0.38], [0.41000000000000003], [0.44], [0.47000000000000003], [0.5], [0.53], [0.56], [0.59], [0.62], [0.65], [0.68], [0.71], [0.74], [0.77], [0.8], [0.8300000000000001], [0.86], [0.89], [0.92], [0.9500000000000001], [0.98], [1.01], [1.04], [1.07], [1.1], [1.1300000000000001], [1.16], [1.19], [1.22], [1.25], [1.28], [1.31], [1.34], [1.37], [1.4000000000000001], [1.43], [1.46], [1.49], [1.52], [1.55], [1.58], [1.61], [1.6400000000000001], [1.67], [1.7], [1.73], [1.76], [1.79], [1.82], [1.85], [1.8800000000000001], [1.9100000000000001], [1.94], [1.97], [2.0], [2.0300000000000002], [2.06], [2.09], [2.12], [2.15], [2.18], [2.21], [2.24], [2.27], [2.3000000000000003], [2.33], [2.36], [2.39], [2.42], [2.45], [2.48], [2.5100000000000002], [2.54], [2.57], [2.6], [2.63], [2.66], [2.69], [2.72], [2.75], [2.7800000000000002], [2.81], [2.84], [2.87], [2.9], [2.93], [2.96], [2.99]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
Pipeline(steps=[('Imputer', SimpleImputer(strategy='median')),
                ('StdScalar', StandardScaler())])
with X (80, 1) [[0.53], [0.56], [0.59], [0.65], [0.68], [0.71], [0.77], [0.8], [0.8300000000000001], [0.86], [0.92], [0.9500000000000001], [0.98], [1.01], [1.04], [1.07], [1.1], [1.1300000000000001], [1.16], [1.19], [1.22], [1.25], [1.28], [1.31], [1.34], [1.37], [1.4000000000000001], [1.43], [1.46], [1.49], [1.52], [1.55], [1.58], [1.61], [1.6400000000000001], [1.67], [1.7], [1.73], [1.76], [1.79], [1.82], [1.85], [1.8800000000000001], [1.9100000000000001], [1.94], [1.97], [2.0], [2.0300000000000002], [2.06], [2.09], [2.12], [2.15], [2.18], [2.21], [2.24], [2.27], [2.3000000000000003], [2.33], [2.36], [2.39], [2.42], [2.45], [2.48], [2.5100000000000002], [2.54], [2.57], [2.6], [2.63], [2.66], [2.69], [2.72], [2.75], [2.7800000000000002], [2.81], [2.84], [2.87], [2.9], [2.93], [2.96], [2.99]]
with y 80 [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
SimpleImputer(strategy='median')
with X (80, 1) [[0.53], [0.56], [0.59], [0.65], [0.68], [0.71], [0.77], [0.8], [0.8300000000000001], [0.86], [0.92], [0.9500000000000001], [0.98], [1.01], [1.04], [1.07], [1.1], [1.1300000000000001], [1.16], [1.19], [1.22], [1.25], [1.28], [1.31], [1.34], [1.37], [1.4000000000000001], [1.43], [1.46], [1.49], [1.52], [1.55], [1.58], [1.61], [1.6400000000000001], [1.67], [1.7], [1.73], [1.76], [1.79], [1.82], [1.85], [1.8800000000000001], [1.9100000000000001], [1.94], [1.97], [2.0], [2.0300000000000002], [2.06], [2.09], [2.12], [2.15], [2.18], [2.21], [2.24], [2.27], [2.3000000000000003], [2.33], [2.36], [2.39], [2.42], [2.45], [2.48], [2.5100000000000002], [2.54], [2.57], [2.6], [2.63], [2.66], [2.69], [2.72], [2.75], [2.7800000000000002], [2.81], [2.84], [2.87], [2.9], [2.93], [2.96], [2.99]]
with y 80 [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

sklearn > utils > __init__.py > _fit_and_score
> Caller __call__

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 24, 29, 33, 35, 37, 38, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
... > train_indices None

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.02], [0.05], [0.08], [0.11], [0.14], [0.17], [0.2], [0.23], [0.26], [0.29], [0.32], [0.35000000000000003], [0.38], [0.41000000000000003], [0.44], [0.47000000000000003], [0.5], [0.53], [0.56], [0.59], [0.62], [0.65], [0.68], [0.71], [0.74], [0.77], [0.8], [0.8300000000000001], [0.86], [0.89], [0.92], [0.9500000000000001], [0.98], [1.01], [1.04], [1.07], [1.1], [1.1300000000000001], [1.16], [1.19], [1.22], [1.25], [1.28], [1.31], [1.34], [1.37], [1.4000000000000001], [1.43], [1.46], [1.49], [1.52], [1.55], [1.58], [1.61], [1.6400000000000001], [1.67], [1.7], [1.73], [1.76], [1.79], [1.82], [1.85], [1.8800000000000001], [1.9100000000000001], [1.94], [1.97], [2.0], [2.0300000000000002], [2.06], [2.09], [2.12], [2.15], [2.18], [2.21], [2.24], [2.27], [2.3000000000000003], [2.33], [2.36], [2.39], [2.42], [2.45], [2.48], [2.5100000000000002], [2.54], [2.57], [2.6], [2.63], [2.66], [2.69], [2.72], [2.75], [2.7800000000000002], [2.81], [2.84], [2.87], [2.9], [2.93], [2.96], [2.99]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 36, 39, 40, 41, 43, 46]
... > train_indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 24, 29, 33, 35, 37, 38, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.02], [0.05], [0.08], [0.11], [0.14], [0.17], [0.2], [0.23], [0.26], [0.29], [0.32], [0.35000000000000003], [0.38], [0.41000000000000003], [0.44], [0.47000000000000003], [0.5], [0.53], [0.56], [0.59], [0.62], [0.65], [0.68], [0.71], [0.74], [0.77], [0.8], [0.8300000000000001], [0.86], [0.89], [0.92], [0.9500000000000001], [0.98], [1.01], [1.04], [1.07], [1.1], [1.1300000000000001], [1.16], [1.19], [1.22], [1.25], [1.28], [1.31], [1.34], [1.37], [1.4000000000000001], [1.43], [1.46], [1.49], [1.52], [1.55], [1.58], [1.61], [1.6400000000000001], [1.67], [1.7], [1.73], [1.76], [1.79], [1.82], [1.85], [1.8800000000000001], [1.9100000000000001], [1.94], [1.97], [2.0], [2.0300000000000002], [2.06], [2.09], [2.12], [2.15], [2.18], [2.21], [2.24], [2.27], [2.3000000000000003], [2.33], [2.36], [2.39], [2.42], [2.45], [2.48], [2.5100000000000002], [2.54], [2.57], [2.6], [2.63], [2.66], [2.69], [2.72], [2.75], [2.7800000000000002], [2.81], [2.84], [2.87], [2.9], [2.93], [2.96], [2.99]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
Pipeline(steps=[('Imputer', SimpleImputer(strategy='median')),
                ('StdScalar', StandardScaler())])
with X (80, 1) [[0.02], [0.05], [0.08], [0.11], [0.14], [0.17], [0.2], [0.23], [0.26], [0.29], [0.32], [0.35000000000000003], [0.38], [0.41000000000000003], [0.44], [0.47000000000000003], [0.5], [0.62], [0.74], [0.89], [1.01], [1.07], [1.1300000000000001], [1.16], [1.28], [1.34], [1.37], [1.43], [1.46], [1.49], [1.52], [1.55], [1.58], [1.61], [1.6400000000000001], [1.67], [1.7], [1.73], [1.76], [1.79], [1.82], [1.85], [1.8800000000000001], [1.9100000000000001], [1.94], [1.97], [2.0], [2.0300000000000002], [2.06], [2.09], [2.12], [2.15], [2.18], [2.21], [2.24], [2.27], [2.3000000000000003], [2.33], [2.36], [2.39], [2.42], [2.45], [2.48], [2.5100000000000002], [2.54], [2.57], [2.6], [2.63], [2.66], [2.69], [2.72], [2.75], [2.7800000000000002], [2.81], [2.84], [2.87], [2.9], [2.93], [2.96], [2.99]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [1], [1], [1], [1], [1], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
SimpleImputer(strategy='median')
with X (80, 1) [[0.02], [0.05], [0.08], [0.11], [0.14], [0.17], [0.2], [0.23], [0.26], [0.29], [0.32], [0.35000000000000003], [0.38], [0.41000000000000003], [0.44], [0.47000000000000003], [0.5], [0.62], [0.74], [0.89], [1.01], [1.07], [1.1300000000000001], [1.16], [1.28], [1.34], [1.37], [1.43], [1.46], [1.49], [1.52], [1.55], [1.58], [1.61], [1.6400000000000001], [1.67], [1.7], [1.73], [1.76], [1.79], [1.82], [1.85], [1.8800000000000001], [1.9100000000000001], [1.94], [1.97], [2.0], [2.0300000000000002], [2.06], [2.09], [2.12], [2.15], [2.18], [2.21], [2.24], [2.27], [2.3000000000000003], [2.33], [2.36], [2.39], [2.42], [2.45], [2.48], [2.5100000000000002], [2.54], [2.57], [2.6], [2.63], [2.66], [2.69], [2.72], [2.75], [2.7800000000000002], [2.81], [2.84], [2.87], [2.9], [2.93], [2.96], [2.99]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [1], [1], [1], [1], [1], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

sklearn > utils > __init__.py > _fit_and_score
> Caller __call__

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 39, 40, 41, 43, 46, 56, 58, 59, 60, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
... > train_indices None

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.02], [0.05], [0.08], [0.11], [0.14], [0.17], [0.2], [0.23], [0.26], [0.29], [0.32], [0.35000000000000003], [0.38], [0.41000000000000003], [0.44], [0.47000000000000003], [0.5], [0.53], [0.56], [0.59], [0.62], [0.65], [0.68], [0.71], [0.74], [0.77], [0.8], [0.8300000000000001], [0.86], [0.89], [0.92], [0.9500000000000001], [0.98], [1.01], [1.04], [1.07], [1.1], [1.1300000000000001], [1.16], [1.19], [1.22], [1.25], [1.28], [1.31], [1.34], [1.37], [1.4000000000000001], [1.43], [1.46], [1.49], [1.52], [1.55], [1.58], [1.61], [1.6400000000000001], [1.67], [1.7], [1.73], [1.76], [1.79], [1.82], [1.85], [1.8800000000000001], [1.9100000000000001], [1.94], [1.97], [2.0], [2.0300000000000002], [2.06], [2.09], [2.12], [2.15], [2.18], [2.21], [2.24], [2.27], [2.3000000000000003], [2.33], [2.36], [2.39], [2.42], [2.45], [2.48], [2.5100000000000002], [2.54], [2.57], [2.6], [2.63], [2.66], [2.69], [2.72], [2.75], [2.7800000000000002], [2.81], [2.84], [2.87], [2.9], [2.93], [2.96], [2.99]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [33, 35, 37, 38, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61, 63, 64]
... > train_indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 39, 40, 41, 43, 46, 56, 58, 59, 60, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.02], [0.05], [0.08], [0.11], [0.14], [0.17], [0.2], [0.23], [0.26], [0.29], [0.32], [0.35000000000000003], [0.38], [0.41000000000000003], [0.44], [0.47000000000000003], [0.5], [0.53], [0.56], [0.59], [0.62], [0.65], [0.68], [0.71], [0.74], [0.77], [0.8], [0.8300000000000001], [0.86], [0.89], [0.92], [0.9500000000000001], [0.98], [1.01], [1.04], [1.07], [1.1], [1.1300000000000001], [1.16], [1.19], [1.22], [1.25], [1.28], [1.31], [1.34], [1.37], [1.4000000000000001], [1.43], [1.46], [1.49], [1.52], [1.55], [1.58], [1.61], [1.6400000000000001], [1.67], [1.7], [1.73], [1.76], [1.79], [1.82], [1.85], [1.8800000000000001], [1.9100000000000001], [1.94], [1.97], [2.0], [2.0300000000000002], [2.06], [2.09], [2.12], [2.15], [2.18], [2.21], [2.24], [2.27], [2.3000000000000003], [2.33], [2.36], [2.39], [2.42], [2.45], [2.48], [2.5100000000000002], [2.54], [2.57], [2.6], [2.63], [2.66], [2.69], [2.72], [2.75], [2.7800000000000002], [2.81], [2.84], [2.87], [2.9], [2.93], [2.96], [2.99]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
Pipeline(steps=[('Imputer', SimpleImputer(strategy='median')),
                ('StdScalar', StandardScaler())])
with X (80, 1) [[0.02], [0.05], [0.08], [0.11], [0.14], [0.17], [0.2], [0.23], [0.26], [0.29], [0.32], [0.35000000000000003], [0.38], [0.41000000000000003], [0.44], [0.47000000000000003], [0.5], [0.53], [0.56], [0.59], [0.62], [0.65], [0.68], [0.71], [0.74], [0.77], [0.8], [0.8300000000000001], [0.86], [0.89], [0.92], [0.9500000000000001], [0.98], [1.04], [1.1], [1.19], [1.22], [1.25], [1.31], [1.4000000000000001], [1.7], [1.76], [1.79], [1.82], [1.8800000000000001], [1.97], [2.0], [2.0300000000000002], [2.06], [2.09], [2.12], [2.15], [2.18], [2.21], [2.24], [2.27], [2.3000000000000003], [2.33], [2.36], [2.39], [2.42], [2.45], [2.48], [2.5100000000000002], [2.54], [2.57], [2.6], [2.63], [2.66], [2.69], [2.72], [2.75], [2.7800000000000002], [2.81], [2.84], [2.87], [2.9], [2.93], [2.96], [2.99]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [1], [1], [1], [1], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
SimpleImputer(strategy='median')
with X (80, 1) [[0.02], [0.05], [0.08], [0.11], [0.14], [0.17], [0.2], [0.23], [0.26], [0.29], [0.32], [0.35000000000000003], [0.38], [0.41000000000000003], [0.44], [0.47000000000000003], [0.5], [0.53], [0.56], [0.59], [0.62], [0.65], [0.68], [0.71], [0.74], [0.77], [0.8], [0.8300000000000001], [0.86], [0.89], [0.92], [0.9500000000000001], [0.98], [1.04], [1.1], [1.19], [1.22], [1.25], [1.31], [1.4000000000000001], [1.7], [1.76], [1.79], [1.82], [1.8800000000000001], [1.97], [2.0], [2.0300000000000002], [2.06], [2.09], [2.12], [2.15], [2.18], [2.21], [2.24], [2.27], [2.3000000000000003], [2.33], [2.36], [2.39], [2.42], [2.45], [2.48], [2.5100000000000002], [2.54], [2.57], [2.6], [2.63], [2.66], [2.69], [2.72], [2.75], [2.7800000000000002], [2.81], [2.84], [2.87], [2.9], [2.93], [2.96], [2.99]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [1], [1], [1], [1], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

sklearn > utils > __init__.py > _fit_and_score
> Caller __call__

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61, 63, 64, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
... > train_indices None

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.02], [0.05], [0.08], [0.11], [0.14], [0.17], [0.2], [0.23], [0.26], [0.29], [0.32], [0.35000000000000003], [0.38], [0.41000000000000003], [0.44], [0.47000000000000003], [0.5], [0.53], [0.56], [0.59], [0.62], [0.65], [0.68], [0.71], [0.74], [0.77], [0.8], [0.8300000000000001], [0.86], [0.89], [0.92], [0.9500000000000001], [0.98], [1.01], [1.04], [1.07], [1.1], [1.1300000000000001], [1.16], [1.19], [1.22], [1.25], [1.28], [1.31], [1.34], [1.37], [1.4000000000000001], [1.43], [1.46], [1.49], [1.52], [1.55], [1.58], [1.61], [1.6400000000000001], [1.67], [1.7], [1.73], [1.76], [1.79], [1.82], [1.85], [1.8800000000000001], [1.9100000000000001], [1.94], [1.97], [2.0], [2.0300000000000002], [2.06], [2.09], [2.12], [2.15], [2.18], [2.21], [2.24], [2.27], [2.3000000000000003], [2.33], [2.36], [2.39], [2.42], [2.45], [2.48], [2.5100000000000002], [2.54], [2.57], [2.6], [2.63], [2.66], [2.69], [2.72], [2.75], [2.7800000000000002], [2.81], [2.84], [2.87], [2.9], [2.93], [2.96], [2.99]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [56, 58, 59, 60, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80]
... > train_indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61, 63, 64, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.02], [0.05], [0.08], [0.11], [0.14], [0.17], [0.2], [0.23], [0.26], [0.29], [0.32], [0.35000000000000003], [0.38], [0.41000000000000003], [0.44], [0.47000000000000003], [0.5], [0.53], [0.56], [0.59], [0.62], [0.65], [0.68], [0.71], [0.74], [0.77], [0.8], [0.8300000000000001], [0.86], [0.89], [0.92], [0.9500000000000001], [0.98], [1.01], [1.04], [1.07], [1.1], [1.1300000000000001], [1.16], [1.19], [1.22], [1.25], [1.28], [1.31], [1.34], [1.37], [1.4000000000000001], [1.43], [1.46], [1.49], [1.52], [1.55], [1.58], [1.61], [1.6400000000000001], [1.67], [1.7], [1.73], [1.76], [1.79], [1.82], [1.85], [1.8800000000000001], [1.9100000000000001], [1.94], [1.97], [2.0], [2.0300000000000002], [2.06], [2.09], [2.12], [2.15], [2.18], [2.21], [2.24], [2.27], [2.3000000000000003], [2.33], [2.36], [2.39], [2.42], [2.45], [2.48], [2.5100000000000002], [2.54], [2.57], [2.6], [2.63], [2.66], [2.69], [2.72], [2.75], [2.7800000000000002], [2.81], [2.84], [2.87], [2.9], [2.93], [2.96], [2.99]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
Pipeline(steps=[('Imputer', SimpleImputer(strategy='median')),
                ('StdScalar', StandardScaler())])
with X (80, 1) [[0.02], [0.05], [0.08], [0.11], [0.14], [0.17], [0.2], [0.23], [0.26], [0.29], [0.32], [0.35000000000000003], [0.38], [0.41000000000000003], [0.44], [0.47000000000000003], [0.5], [0.53], [0.56], [0.59], [0.62], [0.65], [0.68], [0.71], [0.74], [0.77], [0.8], [0.8300000000000001], [0.86], [0.89], [0.92], [0.9500000000000001], [0.98], [1.01], [1.04], [1.07], [1.1], [1.1300000000000001], [1.16], [1.19], [1.22], [1.25], [1.28], [1.31], [1.34], [1.37], [1.4000000000000001], [1.43], [1.46], [1.49], [1.52], [1.55], [1.58], [1.61], [1.6400000000000001], [1.67], [1.73], [1.85], [1.9100000000000001], [1.94], [2.39], [2.45], [2.48], [2.5100000000000002], [2.54], [2.57], [2.6], [2.63], [2.66], [2.69], [2.72], [2.75], [2.7800000000000002], [2.81], [2.84], [2.87], [2.9], [2.93], [2.96], [2.99]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [0], [0], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
SimpleImputer(strategy='median')
with X (80, 1) [[0.02], [0.05], [0.08], [0.11], [0.14], [0.17], [0.2], [0.23], [0.26], [0.29], [0.32], [0.35000000000000003], [0.38], [0.41000000000000003], [0.44], [0.47000000000000003], [0.5], [0.53], [0.56], [0.59], [0.62], [0.65], [0.68], [0.71], [0.74], [0.77], [0.8], [0.8300000000000001], [0.86], [0.89], [0.92], [0.9500000000000001], [0.98], [1.01], [1.04], [1.07], [1.1], [1.1300000000000001], [1.16], [1.19], [1.22], [1.25], [1.28], [1.31], [1.34], [1.37], [1.4000000000000001], [1.43], [1.46], [1.49], [1.52], [1.55], [1.58], [1.61], [1.6400000000000001], [1.67], [1.73], [1.85], [1.9100000000000001], [1.94], [2.39], [2.45], [2.48], [2.5100000000000002], [2.54], [2.57], [2.6], [2.63], [2.66], [2.69], [2.72], [2.75], [2.7800000000000002], [2.81], [2.84], [2.87], [2.9], [2.93], [2.96], [2.99]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [0], [0], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

sklearn > utils > __init__.py > _fit_and_score
> Caller __call__

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80]
... > train_indices None

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.02], [0.05], [0.08], [0.11], [0.14], [0.17], [0.2], [0.23], [0.26], [0.29], [0.32], [0.35000000000000003], [0.38], [0.41000000000000003], [0.44], [0.47000000000000003], [0.5], [0.53], [0.56], [0.59], [0.62], [0.65], [0.68], [0.71], [0.74], [0.77], [0.8], [0.8300000000000001], [0.86], [0.89], [0.92], [0.9500000000000001], [0.98], [1.01], [1.04], [1.07], [1.1], [1.1300000000000001], [1.16], [1.19], [1.22], [1.25], [1.28], [1.31], [1.34], [1.37], [1.4000000000000001], [1.43], [1.46], [1.49], [1.52], [1.55], [1.58], [1.61], [1.6400000000000001], [1.67], [1.7], [1.73], [1.76], [1.79], [1.82], [1.85], [1.8800000000000001], [1.9100000000000001], [1.94], [1.97], [2.0], [2.0300000000000002], [2.06], [2.09], [2.12], [2.15], [2.18], [2.21], [2.24], [2.27], [2.3000000000000003], [2.33], [2.36], [2.39], [2.42], [2.45], [2.48], [2.5100000000000002], [2.54], [2.57], [2.6], [2.63], [2.66], [2.69], [2.72], [2.75], [2.7800000000000002], [2.81], [2.84], [2.87], [2.9], [2.93], [2.96], [2.99]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

... sklearn > utils > metaestimators.py > _safe_split
... > Caller _fit_and_score
... > indices [79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
... > train_indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _array_indexing <class 'numpy.ndarray'>
... ... > X (100, 1) [[0.02], [0.05], [0.08], [0.11], [0.14], [0.17], [0.2], [0.23], [0.26], [0.29], [0.32], [0.35000000000000003], [0.38], [0.41000000000000003], [0.44], [0.47000000000000003], [0.5], [0.53], [0.56], [0.59], [0.62], [0.65], [0.68], [0.71], [0.74], [0.77], [0.8], [0.8300000000000001], [0.86], [0.89], [0.92], [0.9500000000000001], [0.98], [1.01], [1.04], [1.07], [1.1], [1.1300000000000001], [1.16], [1.19], [1.22], [1.25], [1.28], [1.31], [1.34], [1.37], [1.4000000000000001], [1.43], [1.46], [1.49], [1.52], [1.55], [1.58], [1.61], [1.6400000000000001], [1.67], [1.7], [1.73], [1.76], [1.79], [1.82], [1.85], [1.8800000000000001], [1.9100000000000001], [1.94], [1.97], [2.0], [2.0300000000000002], [2.06], [2.09], [2.12], [2.15], [2.18], [2.21], [2.24], [2.27], [2.3000000000000003], [2.33], [2.36], [2.39], [2.42], [2.45], [2.48], [2.5100000000000002], [2.54], [2.57], [2.6], [2.63], [2.66], [2.69], [2.72], [2.75], [2.7800000000000002], [2.81], [2.84], [2.87], [2.9], [2.93], [2.96], [2.99]]

... ... sklearn > utils > __init__.py > _safe_indexing
... ... > Caller _safe_split
... ... > INTO _pandas_indexing <class 'pandas.core.frame.DataFrame'>
... ... > X 100 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1]]

....................
Fitting transformer:
Pipeline(steps=[('Imputer', SimpleImputer(strategy='median')),
                ('StdScalar', StandardScaler())])
with X (80, 1) [[0.02], [0.05], [0.08], [0.11], [0.14], [0.17], [0.2], [0.23], [0.26], [0.29], [0.32], [0.35000000000000003], [0.38], [0.41000000000000003], [0.44], [0.47000000000000003], [0.5], [0.53], [0.56], [0.59], [0.62], [0.65], [0.68], [0.71], [0.74], [0.77], [0.8], [0.8300000000000001], [0.86], [0.89], [0.92], [0.9500000000000001], [0.98], [1.01], [1.04], [1.07], [1.1], [1.1300000000000001], [1.16], [1.19], [1.22], [1.25], [1.28], [1.31], [1.34], [1.37], [1.4000000000000001], [1.43], [1.46], [1.49], [1.52], [1.55], [1.58], [1.61], [1.6400000000000001], [1.67], [1.7], [1.73], [1.76], [1.79], [1.82], [1.85], [1.8800000000000001], [1.9100000000000001], [1.94], [1.97], [2.0], [2.0300000000000002], [2.06], [2.09], [2.12], [2.15], [2.18], [2.21], [2.24], [2.27], [2.3000000000000003], [2.33], [2.36], [2.42]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [1]]

....................
Fitting transformer:
SimpleImputer(strategy='median')
with X (80, 1) [[0.02], [0.05], [0.08], [0.11], [0.14], [0.17], [0.2], [0.23], [0.26], [0.29], [0.32], [0.35000000000000003], [0.38], [0.41000000000000003], [0.44], [0.47000000000000003], [0.5], [0.53], [0.56], [0.59], [0.62], [0.65], [0.68], [0.71], [0.74], [0.77], [0.8], [0.8300000000000001], [0.86], [0.89], [0.92], [0.9500000000000001], [0.98], [1.01], [1.04], [1.07], [1.1], [1.1300000000000001], [1.16], [1.19], [1.22], [1.25], [1.28], [1.31], [1.34], [1.37], [1.4000000000000001], [1.43], [1.46], [1.49], [1.52], [1.55], [1.58], [1.61], [1.6400000000000001], [1.67], [1.7], [1.73], [1.76], [1.79], [1.82], [1.85], [1.8800000000000001], [1.9100000000000001], [1.94], [1.97], [2.0], [2.0300000000000002], [2.06], [2.09], [2.12], [2.15], [2.18], [2.21], [2.24], [2.27], [2.3000000000000003], [2.33], [2.36], [2.42]]
with y 80 [[1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [0], [1], [1], [1], [0], [1], [1], [1], [1], [0], [1], [0], [0], [1], [0], [1], [0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [0], [1], [1], [0], [0], [0], [1], [1], [1], [0], [1], [1], [1], [0], [1], [0], [0], [0], [1], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [0], [0], [1]]

RESULTS:
{'fit_error': None, 'test_scores': {'score': 0.55}, 'fit_time': 0.0785834789276123, 'score_time': 0.0}
{'fit_error': None, 'test_scores': {'score': 0.15}, 'fit_time': 0.08016753196716309, 'score_time': 0.0}
{'fit_error': None, 'test_scores': {'score': 0.3}, 'fit_time': 0.08621597290039062, 'score_time': 0.0}
{'fit_error': None, 'test_scores': {'score': 0.5}, 'fit_time': 0.07816958427429199, 'score_time': 0.0}
{'fit_error': None, 'test_scores': {'score': 0.5}, 'fit_time': 0.08020997047424316, 'score_time': 0.0}
